package process.recharge;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.regex.Pattern;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import security.UserLogged;
import sessionVar.SessionUtil;
import util.ws.PseWS;
import constant.EmailProcess;
import ejb.Login;
import ejb.User;
import ejb.email.Outbox;

/**
 * 
 * @author jromero
 *
 */
public class VerificatorBean implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String idPseTransaction;
	private String message="";
	private UserLogged usrs;
	private Long userId=-1L;
	private Long userMId=-1L;
	private Long pseId=-1L;
	private String name="";
	private String action="";
	private String decodeId="";
	
	@EJB(mappedName ="util/ws/PseWS")
	private PseWS pseWS;

	@EJB(mappedName = "ejb/User")
	private User user;
	
	@EJB(mappedName ="ejb/email/Outbox")
	private Outbox outbox;
	
	@EJB(mappedName = "ejb/Login")
	private Login loginEJB;
	
	public VerificatorBean() {
	}

	@PostConstruct
	public void init(){
		boolean notification=false;
		action="failConn";
		idPseTransaction=(String) FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("v");
		System.out.println("idPseTransaction: "+idPseTransaction);
		usrs = (UserLogged) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("user");
		if(idPseTransaction!=null&&!idPseTransaction.equals("")){
			decodeId=pseWS.decodePSETransaction(idPseTransaction);
			if(decodeId!=null){
				try{
					System.out.println("tran: "+decodeId);
					String[] a=decodeId.split(Pattern.quote("+"));
					pseId=Long.parseLong(a[0]);
					userId=Long.parseLong(a[1]);
				}catch (Exception e) {
					pseId=-1L;
					userId=-1L;
					e.printStackTrace();
					System.out.println(" [ VerificatorBean.split ] ");
				}
				if(pseId!=-1L&&userId!=-1L){
					userMId=user.getSystemMasterById(userId);
					System.out.println("userMId: "+userMId);
					boolean existUrl=pseWS.existURL(pseId);
					System.out.println("existUrl: "+existUrl);
					if(existUrl==true){
						boolean usedUrl=pseWS.isUsedURL(pseId);
						System.out.println("usedUrl: "+usedUrl);
						if(usedUrl==false){
							boolean onDayURL=pseWS.isOnDayURLbyUmbral(pseId);
							System.out.println("onDayURL: "+onDayURL);
							if(onDayURL==true){
								boolean onTimeUrl=pseWS.isOnTimeURLbyUmbral(pseId);
								System.out.println("onTimeUrl: "+onTimeUrl);
								if(onTimeUrl==true){
									if(usrs!=null){
										System.out.println("usrs1: "+usrs.getUserId());
										System.out.println("usrs2: "+usrs.getUsername());
										if(userMId.equals(user.getSystemMasterById(usrs.getUserId()))){
											try{	
												FacesContext.getCurrentInstance().getExternalContext().getSessionMap()
												.put("pse", pseWS.encodePSETransaction(String.valueOf(pseId)));
											}catch(IllegalStateException i){
												System.out.println("[ Error en VerificatorBean.FacesContext2 ]");
												i.printStackTrace();
											}
											action="okConn";
										}
									}
								}else{
									try{
										FacesContext context = FacesContext.getCurrentInstance();
										HttpSession session = (HttpSession) context.getExternalContext()
												.getSession(false);
										System.out.println("session: "+session);
										System.out.println("userId: "+userId);
										if (session != null) {
										  if(userId != null){	
											this.loginEJB.updateLastLogin(userId);
										  }	
											session.invalidate();
										}
										FacesContext.getCurrentInstance().getExternalContext().getSessionMap()
										.put("pse", pseWS.encodePSETransaction(String.valueOf(pseId)));
									}catch(IllegalStateException i){
										System.out.println("[ Error en VerificatorBean.FacesContext3 ]");
										i.printStackTrace();
									}
									action="pendingConn";
								}
							}
						}
					}else{
						notification=true;
					}
				}else{
					notification=true;
				}
			}else{
				notification=true;
			}
		}else{
			notification=true;
		}
		System.out.println("notification: "+notification);
		if(notification==true){
			HttpServletRequest origRequest = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
			ArrayList<String> parameters=new ArrayList<String>();
			parameters.add("#ACCIP="+SessionUtil.ip());
			if(idPseTransaction==null){
				parameters.add("#ACCURL="+origRequest.getRequestURL().substring(0));
			}else{
				parameters.add("#ACCURL="+origRequest.getRequestURL().substring(0)+"?v="+idPseTransaction);
			}
			
			System.out.println("verificartor.parameters: "+parameters.toString());
			
			outbox.insertMessageOutbox(null, 
	                   EmailProcess.PSE_URL_NO_AUTHORIZED,
	                   null,
	                   null,
	                   null, 
	                   null,
	                   null,
	                   null,
	                   null,
	                   null,
	                   null,
		               null,
		               null,
		               null,
	                   true,
	                   parameters);
		}
		FacesContext.getCurrentInstance().getApplication().getNavigationHandler().
		handleNavigation(FacesContext.getCurrentInstance(), null, 
				action);
	}

	public String getIdPseTransaction() {
		return idPseTransaction;
	}

	public void setIdPseTransaction(String idPseTransaction) {
		this.idPseTransaction = idPseTransaction;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public UserLogged getUsrs() {
		return usrs;
	}

	public void setUsrs(UserLogged usrs) {
		this.usrs = usrs;
	}

	public Long getUserId() {
		return userId;
	}

	public void setUserId(Long userId) {
		this.userId = userId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAction() {
		return action;
	}

	public void setAction(String action) {
		this.action = action;
	}

	public Long getPseId() {
		return pseId;
	}

	public void setPseId(Long pseId) {
		this.pseId = pseId;
	}

	public String getDecodeId() {
		return decodeId;
	}

	public void setDecodeId(String decodeId) {
		this.decodeId = decodeId;
	}
	
}