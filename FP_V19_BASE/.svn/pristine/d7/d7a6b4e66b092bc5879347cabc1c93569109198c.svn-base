package process.recharge;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jpa.ReAccountBank;
import jpa.TbAccount;
import jpa.TbProcessTrack;
import jpa.TbSystemUser;
import linews.InvokeSqdm;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import report.ReportConfigUtil;
import security.UserLogged;
import sessionVar.SessionUtil;
import upload.FileUtil;
import util.ConnectionData;
import util.HistoricalRecharges;
import util.ObjectRechage;
import util.ws.PseWS;
import util.ws.WSRecharge;
import validator.Validation;

import com.ath.service.payments.pseservices.BankACHData;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

import constant.AccountStateType;
import constant.EmailProcess;
import constant.ProcessTrackDetailType;
import constant.ProcessTrackType;
import ejb.Process;
import ejb.SystemParameters;
import ejb.User;
import ejb.email.Outbox;

public class RechargeClientBean implements Serializable {
	private static final long serialVersionUID = 6500805642305307299L;

	@EJB(mappedName = "ejb/User")
	private User user;

	@EJB(mappedName = "ejb/Process")
	private Process proceso;

	@EJB(mappedName = "util/ws/WSRecharge")
	private WSRecharge WSrecharge;

	@PersistenceContext(unitName = "bo")
	private EntityManager em;

	@EJB(mappedName ="ejb/email/Outbox")
	private Outbox outbox;

	@EJB(mappedName ="util/ws/PseWS")
	private PseWS pseWS;

	@EJB(mappedName ="ejb/SystemParameters")
	private SystemParameters parametros;	


	private Long idClientAccount;

	private List<SelectItem> clientAccounts;

	private Long valueRecharge;

	private String valueRechText;

	private String msgModal;

	private boolean showModal;

	private boolean showConfirmationModal;

	private long valmin;

	private String valMinText;

	private boolean showBotton;

	private boolean showWait;

	private UserLogged usrs;

	private boolean showPseAccount=false;

	private String typePer="0";

	private String idPseEntity;

	private List<SelectItem> pseEntities=null;
	
	private List<BankACHData> banks=null; 

	private List<HistoricalRecharges> rechargeList;
	
	private List<HistoricalRecharges> pendingRechargeList;
	
	private boolean showRechargeList;

	public int processError;
	
	private String context="";
	
	private String pseIdStr=null;
	
	private Long pseId=-1L;
	
	private String bankName="";
	
	private Long expUmbralId=-1L;
	
	private String tooltipCuenta="";
	
	private String tooltipEntidad="";
	
	private String tooltipValor="";
	
	private String tooltipPersona="";
	
	private boolean showModalPSE=false;
	
	private boolean showConfirmationModalPSE=false;
	
	public boolean disableButtons=false;
	
	private String COMPILE_FILE_NAME = " ";

	private final String COMPILE_DIR = "/jasper/design/";
	
	private int page = 1;
	
	private boolean messageMinrecharge = false;
	
	private static final int DEFAULT_BUFFER_SIZE = 10240; // 10KB.
	
	/**
	 * Constante que almacena el filtro por el cual filtra la lista de pendientes 
	 */
	private static final String STADO_PENDIENTE="Pendiente";
		
	private static final Long POSTPAGO=71L;
	
	private static final Long PREPAGO=30L;	
	
	private boolean showPending=false;
	private int bt = 0; 
		
	

	public RechargeClientBean(){
		usrs = (UserLogged) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("user");
		this.setShowBotton(false);
	}

	@PostConstruct
	public void init(){
		Long valor,aprobado;
		String nomBank;
		msgModal = "";
		showModal = false;
		showConfirmationModal =  false;
		showConfirmationModalPSE = false;
		showModalPSE = false;
		HttpServletRequest origRequest = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
		System.out.println("url1: "+origRequest.getPathInfo());
		context=origRequest.getRequestURL().substring(0,origRequest.getRequestURL()
				.indexOf(origRequest.getPathInfo())+1);
		System.out.println("context: "+context);
		pseIdStr=(String)FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("pse");
		System.out.println("pseIdStr: "+pseIdStr);
		if(pseIdStr!=null){
			try{
				FacesContext.getCurrentInstance().getExternalContext().getSessionMap()
				.put("pse", null);
				pseId=Long.parseLong(pseWS.decodePSETransaction(pseIdStr));
				System.out.println("pseId: "+pseId);
				aprobado=pseWS.getAprobadoById(pseId);
				valor=pseWS.getValorById(pseId);
				nomBank=pseWS.getBancoById(pseId);
				DecimalFormat nf = new DecimalFormat("###,###,###");
				this.setIdClientAccount(pseWS.getAccountByPse(pseId));
				if(aprobado!=null){
					if(idClientAccount!=-1L){
						this.setShowRechargeList(true);
						this.setShowPseAccount(true);
						if(aprobado==0L){
							msgModal="La asignación de recursos por valor de $"+nf.format(valor)
								+" para la Cuenta FacilPass No. "+idClientAccount+" fue rechazada " +
										"por la entidad FACILPAGO - "+nomBank+". Para ver el comprobante " +
												"de la transacción de clic en el botón Ver Comprobante.";
						}else if(aprobado==1L){
							msgModal="La asignación de recursos por valor de $"+nf.format(valor)
							+" para la Cuenta FacilPass No. "+idClientAccount+" fue aprobada " +
									"por la entidad FACILPAGO - "+nomBank+". Para ver el comprobante " +
											"de la transacción de clic en el botón Ver Comprobante.";
						}
						showConfirmationModalPSE = true;
					}else{
						msgModal="Error, por favor inténtelo nuevamente.";
						showModal = true;
					}
				}else{
					if(idClientAccount!=-1L){
						this.setShowPseAccount(true);
						this.setShowRechargeList(true);
						pseWS.processingPse(pseId);
						Long res=-5L;
						if(pseWS.verifyStateUmbral(pseWS.getUmbralByPseId(pseId), 3L)){
							res=pseWS.endPseTransaction(pseId,SessionUtil.ip(),usrs.getUserId(),0L);
						}
						System.out.println("res: "+res);
						if(res==-3L||res==-4L){
							msgModal="No fue posible validar la transacción, por favor valide con " +
									"su entidad.";
							showModalPSE = true;
						}else{
							if(res==-1L){
								pseWS.createProcessForPse(usrs.getUserId(), SessionUtil.ip(), "Asignación de Recursos " +
										"por valor de $"+nf.format(valor)+" para la Cuenta FacilPass No. "+idClientAccount+" rechazada " +
										"por la entidad FACILPAGO - "+nomBank+". Para ver el comprobante de la transacción de clic ", 
										"Error al Crear Proceso para Recarga Manual de la cuenta "+
										idClientAccount, user.getSystemMasterById(usrs.getUserId()),2L,
										this.saveVoucher(user.getSystemMasterById(usrs.getUserId()),
												pseId),pseId);
								msgModal="Señor usuario se presentó un error en los datos que ingresó, para " +
										"verificar su transacción, por favor valide con su entidad.";
								showModalPSE = true;
							}else if(res==-2L){
								pseWS.createProcessForPse(usrs.getUserId(), SessionUtil.ip(), "Asignación de Recursos " +
										"por valor de $"+nf.format(valor)+" para la Cuenta FacilPass No. "+idClientAccount+" rechazada " +
										"por la entidad FACILPAGO - "+nomBank+". Para ver el comprobante de la transacción de clic ", 
										"Error al Crear Proceso para Recarga Manual de la cuenta "+
										idClientAccount, user.getSystemMasterById(usrs.getUserId()),2L,
										this.saveVoucher(user.getSystemMasterById(usrs.getUserId()),
												pseId),pseId);
								msgModal="No hay comunicación con su entidad financiera, para " +
									"verificar su transacción, por favor valide con su entidad.";
								showModalPSE = true;
							}else if(res==-5L){
								msgModal="La transacción aún está pendiente, por favor valide más tarde " +
										"en está misma opción.";
								showModalPSE = true;
							}else if(res==-6L){
								pseWS.createProcessForPse(usrs.getUserId(), SessionUtil.ip(), "Asignación de Recursos " +
										"por valor de $"+nf.format(valor)+" para la Cuenta FacilPass No. "+idClientAccount+" rechazada " +
										"por la entidad FACILPAGO - "+nomBank+". Para ver el comprobante de la transacción de clic ", 
										"Error al Crear Proceso para Recarga Manual de la cuenta "+
										idClientAccount, user.getSystemMasterById(usrs.getUserId()),2L,
										this.saveVoucher(user.getSystemMasterById(usrs.getUserId()),
												pseId),pseId);
								msgModal="La asignación de recursos por valor de $"+nf.format(valor)
								+" para la Cuenta FacilPass No. "+idClientAccount+" fue rechazada " +
										"por la entidad FACILPAGO - "+nomBank+". Para ver el comprobante " +
												"de la transacción de clic en el botón Ver Comprobante.";
								showConfirmationModalPSE = true;
							}else{
								pseWS.createProcessForPse(usrs.getUserId(), SessionUtil.ip(), "Asignación de Recursos " +
										"por valor de $"+nf.format(valor)+" para la Cuenta FacilPass No. "+idClientAccount+" aprobada " +
										"por la entidad FACILPAGO - "+nomBank+". Para ver el comprobante de la transacción de clic ", 
										"Error al Crear Proceso para Recarga Manual de la cuenta "+
										idClientAccount, user.getSystemMasterById(usrs.getUserId()),2L,
										this.saveVoucher(user.getSystemMasterById(usrs.getUserId()),
												pseId),pseId);
								msgModal="La asignación de recursos por valor de $"+nf.format(valor)
								+" para la Cuenta FacilPass No. "+idClientAccount+" fue aprobada " +
										"por la entidad FACILPAGO - "+nomBank+". Para ver el comprobante " +
												"de la transacción de clic en el botón Ver Comprobante.";
								showConfirmationModalPSE = true;
							}
						}
					}else{
						msgModal="Error, por favor inténtelo nuevamente.";
						showModal = true;
					}
				}
			}catch (Exception e) {
				e.printStackTrace();
				System.out.println("[ Error en RechargeClientBean.init ]");
			}
		}
	}
	
	public boolean isMessageMinrecharge() {
		return messageMinrecharge;
	}

	public void setMessageMinrecharge(boolean messageMinrecharge) {
		this.messageMinrecharge = messageMinrecharge;
	}
	
	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public User getUser() {
		return user;
	}

	public void setIdClientAccount(Long idClientAccount) {
		this.idClientAccount = idClientAccount;
	}

	public Long getIdClientAccount() {
		return idClientAccount;
	}

	public void setClientAccounts(List<SelectItem> clientAccounts) {
		this.clientAccounts = clientAccounts;
	}
	public List<SelectItem> getClientAccounts() {
		try {
			Long userId=user.getSystemMasterById(usrs.getUserId());
			if(clientAccounts == null){
				clientAccounts = new ArrayList<SelectItem>();
			} else {
				clientAccounts.clear();
			}
			clientAccounts.add(new SelectItem(-1L, "--Seleccione Una--"));
			
				for(TbAccount su : user.getClientAccount(userId)){
					System.out.println(su.getAccountState().longValue());
					if((su.getAccountState().longValue()==AccountStateType.ACTIVE.getId()) ||
							(su.getAccountState().longValue()==7L)){
						clientAccounts.add(new SelectItem(su.getAccountId(), "Cuenta No. " + su.getAccountId()));
					}			
				}			
		} catch (Exception e) {
			e.printStackTrace();
			clientAccounts = new ArrayList<SelectItem>();
			clientAccounts.clear();
			clientAccounts.add(new SelectItem(-1L, "--Seleccione Una--"));
			msgModal = "Ha Ocurrido un Error en el sistema, vuelva a intentarlo.";					
			showModal = true;
		}
		return clientAccounts;
	}

	public void setValueRecharge(Long valueRecharge) {
		this.valueRecharge = valueRecharge;
	}

	public Long getValueRecharge() {
		return valueRecharge;
	}

	public void setMsgModal(String msgModal) {
		this.msgModal = msgModal;
	}

	public String getMsgModal() {
		return msgModal;
	}

	public void setShowModal(boolean showModal) {
		this.showModal = showModal;
	}

	public boolean isShowModal() {
		return showModal;
	}


	public void msgSavePse(){
		try {
			System.out.println("msgSavePse");
			hideModals();
			System.out.println("idClientAccount: "+idClientAccount);
			System.out.println("idPseEntity: "+idPseEntity);
			System.out.println("typePer: "+typePer);
			valueRechText=valueRechText.replaceFirst("^0*", "").trim();
			System.out.println("valueRechText2 " + valueRechText);
			//showPseAccount = false;
			if(idClientAccount != -1L){
				if(!idPseEntity.equals("-1L")){
					bankName=pseWS.getBankByCode(banks, idPseEntity);
					System.out.println("bankName: "+bankName);
					System.out.println("valueRechText: "+valueRechText);
					if((valueRechText.equals("")) || (valueRechText.equals(null))){
						//showPseAccount = false;
						msgModal = "El campo Valor a Asignar es requerido.";
						showConfirmationModal = false;
						showModalPSE = true;
					}else if(!Validation.isNumericPuntoYComaNoConsecutive(valueRechText)){
						msgModal = "El campo Valor a Asignar contiene caracteres inválidos, por favor verifique";
						showConfirmationModal = false;
						//showPseAccount = false;
						showModalPSE = true;
					} else {
						if((valueRechText.equals("")) || (valueRechText.equals(null))){
							msgModal = "El campo Valor a Asignar es requerido.";
							showConfirmationModal = false;
							//showPseAccount = false;
							showModalPSE = true;					
						} else{
							valueRecharge = Long.parseLong(valueRechText.replace(".", "").replace(",", ""));
						}
						this.getValmin(POSTPAGO);
						System.out.println("valmin2 "+valmin);
						if(valueRecharge < valmin){
							//showPseAccount = false;
							msgModal = "El valor Ingresado es menor al valor mínimo para recarga";
							showConfirmationModal = false;
							showModalPSE = true;
						} else {
							msgModal = "Se va a realizar una asignación de recursos por valor de $"+valueRechText+
								" con la entidad bancaria "+bankName;
							showModalPSE = false;
							showConfirmationModal = true;
						}
					}
				}else{
					//showPseAccount = false;
					msgModal = "No ha seleccionado la entidad bancaria";
					showConfirmationModal = false;
					showModalPSE = true;
				}
			} else {
				showPseAccount = false;
				msgModal = "No ha seleccionado cuenta";
				showConfirmationModal = false;
				showModal = true;
			}
		} catch(Exception e){
			e.printStackTrace();
			showPseAccount = false;
			msgModal = "Ha Ocurrido un Error";
			showConfirmationModal = false;
			showModal = true;
		}
	}

	public void msgSave(){
		try {
			System.out.println("msgSave");
			hideModals();
			valueRechText=valueRechText.replaceFirst("^0*", "").trim();
			System.out.println("valueRechText2 " + valueRechText);
			if(idClientAccount != -1L){
				System.out.println("valueRechText: "+valueRechText);
				if((valueRechText.equals("")) || (valueRechText.equals(null))){
					showPseAccount = false;
					msgModal = "El campo Valor a Asignar es requerido.";
					showConfirmationModal = false;
					showModal = true;
				}else if(!Validation.isNumericPuntoYComaNoConsecutive(valueRechText)){
					msgModal = "El campo Valor a Asignar contiene caracteres inválidos, por favor verifique";
					showConfirmationModal = false;
					showPseAccount = false;
					showModal = true;
				} else {	
					if((valueRechText.equals("")) || (valueRechText.equals(null))){
						msgModal = "El campo Valor a Asignar es requerido.";
						showConfirmationModal = false;
						showPseAccount = false;
						showModal = true;					
					} else{
						valueRecharge = Long.parseLong(valueRechText.replace(".", "").replace(",", ""));
					}
					this.getValmin(PREPAGO);
					System.out.println("valmin2 "+valmin);
					if(valueRecharge < valmin){
						showPseAccount = false;
						msgModal = "El valor Ingresado es menor al valor mínimo para recarga";
						showConfirmationModal = false;
						showModal = true;
					} else {
						showPseAccount = false;
						msgModal = "Asignación de Recursos por valor de "+valueRechText;
						msgModal = msgModal+"\n"+ "¿Está seguro de realizar esta operación?";
						showModal = false;
						showConfirmationModal = true;
					}
				}
			} else {
				showPseAccount = false;
				msgModal = "No ha seleccionado cuenta";
				showConfirmationModal = false;
				showModal = true;
			}
		} catch(Exception e){
			e.printStackTrace();
			showPseAccount = false;
			msgModal = "Ha Ocurrido un Error";
			showConfirmationModal = false;
			showModal = true;
		}
	}

	public void changeAccount(){
		
		showPending = false;
		if(idClientAccount==-1L){
			this.setShowPseAccount(false);
			this.setShowRechargeList(false);
		}else{
			this.setShowRechargeList(true);
			try {
				if(user.validatePseAccount(idClientAccount)){
					getValmin(POSTPAGO);
					setMessageMinrecharge(true);
					this.getPseEntities();
					this.setShowPseAccount(true);
				}else{
					getValmin(PREPAGO);
					setMessageMinrecharge(true);
					this.setShowPseAccount(false);
				}
				
			} catch (Exception e) {
				this.setShowPseAccount(false);
				setMessageMinrecharge(false);
				// TODO Auto-generated catch block
				e.printStackTrace();
			}			
		}
		System.out.println("changeAccount.showPseAccount: "+showPseAccount);
		if(showPseAccount){
			pendingRechargeList=pseWS.getPendingRecharges(idClientAccount);
			if(pendingRechargeList.size()>0){

				try{
					this.callThreadSondaClient();					
					//pendingRechargeList=pseWS.getPendingRecharges(idClientAccount);
					this.getRechargeList();
					pendingRechargeList.clear();
					for (HistoricalRecharges pendi : rechargeList) {
						if(pendi.getUmbralState().equals(STADO_PENDIENTE)&&pendi.getUmbralChannel()==1){
							pendingRechargeList.add(pendi);
						}
					}
					/*if(pseWS.listPendientes(idClientAccount)){*/
					if(pendingRechargeList.size()>0){
						msgModal="Usted tienen transacciones aún pendientes por aplicar, " +
						"desea continuar con una nueva transacción?";
						showPending=true;
						this.setShowPseAccount(true);
						System.out.println("Logica validación");
					}
				}catch (Exception e) {						
					System.out.println("error sonda cliente");
					msgModal = "Ha Ocurrido un Error en el sistema, vuelva a intentarlo.";					
					showModal = true;
					e.printStackTrace();
				}				
			}else{
				this.getRechargeList();
			}
		}else{
			this.getRechargeList();
		}				
		this.setShowRechargeList(true);
		
		System.out.println("lista actualizada...");
	}

	private void callThreadSondaClient() {		
		
			hideModals();
			ExternalContext externalContext = FacesContext.getCurrentInstance()
			.getExternalContext();
			ServletContext cont = (ServletContext) externalContext
			.getContext();
			HttpServletRequest origRequest = (HttpServletRequest)FacesContext.getCurrentInstance()
			.getExternalContext().getRequest();
			ThreadSondaClientPSEBean t=new ThreadSondaClientPSEBean();
			t.setAccountId(idClientAccount);
			t.setContext(cont);
			t.setReq(origRequest);
			t.run();
		
	}

	public void onComplete() {  
		FacesContext.getCurrentInstance().
		addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, 
				"Transacción en proceso...", "Transacción en proceso..."));  
	}

	public void cancel(){
		System.out.println("Cancel");
		setPage(1);
		showModalPSE = false;
		showConfirmationModalPSE = false;
		showPending = false;
		msgModal = "";
		showModal = false;
		showConfirmationModal =  false;
		this.setShowRechargeList(false);
		this.setShowBotton(false);
		showPseAccount=false;
		bankName="";
		valueRecharge = null;
		this.setIdClientAccount(-1L);
		valueRechText = "";
		this.setMessageMinrecharge(false);
	}

	public void cancelPSE(){
		System.out.println("cancelPse");
		System.out.println("idClientAccount: "+idClientAccount);
		System.out.println("bankName: "+bankName);
		System.out.println("valueRechText: "+valueRechText);
		
		boolean respu = false;
		try{
			respu = user.validatePseAccount(idClientAccount);
		}catch (Exception e) {
			System.out.println("error en cancelPSE validatePseAccount");
			e.printStackTrace();
		}
		
		
		if(respu){
			pseWS.createProcessForPse(SessionUtil.sessionUser().getUserId(), SessionUtil.ip(),
					"Asignación de Recursos cancelada por el usuario, con los siguientes datos, por valor $"+
					valueRechText+" para la Cuenta FacilPass No. "+idClientAccount+
					" de la entidad FACILPAGO - "+bankName,
					"Error al Crear Proceso para Recarga Manual de la cuenta "+
					idClientAccount, user.getAccountById(idClientAccount).getTbSystemUser().getUserId(),0L,
					null,null);
		}
		cancel();
		msgModal = "Se canceló la asignación de recursos";
		showModal = true;
		this.setMessageMinrecharge(false);
	}
	public void setShowConfirmationModal(boolean showConfirmationModal) {
		this.showConfirmationModal = showConfirmationModal;
	}

	public boolean isShowConfirmationModal() {
		return showConfirmationModal;
	}	

	public void method(){
		showWait=true;
	}

	public void method2(){
		showWait=false;
	}

	public void save(){
		try{			
			System.out.println("Save");
			hideModals();
			showConfirmationModal =  false;		
			Long userId=user.getSystemMasterById(usrs.getUserId());
			String msgProcessClient = "";
			String msgProcessAdmin = "";
			/** verifica si la cuenta esta en proceso de disociacion
			 * 
			 */
			if(user.getIsAccountdissociationProcess(idClientAccount)){
				msgModal = "La cuenta seleccionada está en proceso de Disociación";
				showConfirmationModal =  false;
				showModal = true;
			} else {
				boolean respu = false;
				try{
					respu = user.validatePseAccount(idClientAccount);
				}catch (Exception e) {
					System.out.println("error en save validatePseAccount...");
					e.printStackTrace();
				}
				
				if(respu){
					try {
						System.out.println("idPseEntity: "+idPseEntity);
						Long r=pseWS.processTransactionPse(idClientAccount, String.valueOf(typePer), idPseEntity, 
											bankName,valueRecharge,context,
											usrs.getUserId(), SessionUtil.ip());
						if(r<=0L){
							
							if(r!=-8L){
								String idPSEStr=(String)FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("idPseT");
								FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("idPseT", null);
								System.out.println("idPSEStr: "+idPSEStr);
								Long idPse=Long.parseLong(pseWS.decodePSETransaction(idPSEStr));
								System.out.println("idPse: "+idPse);
								DecimalFormat nf = new DecimalFormat("###,###,###");
								pseWS.createProcessForPse(usrs.getUserId(), SessionUtil.ip(), "Asignación de Recursos " +
										"por valor de $"+nf.format(valueRecharge)+" para la Cuenta FacilPass No. "+idClientAccount+" fue rechazada " +
										"por la entidad FACILPAGO - "+bankName+". Para ver el comprobante de la transacción de clic ", 
										"Error al Crear Proceso para Recarga Manual de la cuenta "+
										idClientAccount, userId,2L,
										this.saveVoucher(userId,idPse),idPse);
							}
							
							if(r==-4L){
								msgModal = "Ha Ocurrido un Error.";
								showConfirmationModal = false;
								showModal = true;
							}else if(r==-3){
								msgModal = "Ocurrió un error de conexión.";
								showConfirmationModal = false;
								showModal = true;
							}else if(r==-1L){
								msgModal = "Señor usuario se presentó un error en los datos que ingresó, por favor confirme " +
										"los datos e intente nuevamente.";
								showConfirmationModal = false;
								showModalPSE = true;
							}else if(r==-2L){
								msgModal = "No hay comunicación con su entidad financiera, intente más tarde.";
								showConfirmationModal = false;
								showModal = true;
							}else if(r==-8L){
								msgModal = "No fue posible comunicarse con su entidad, por favor intente nuevamente. ";
								showConfirmationModal = false;
								showModal = true;
							}
						}else{
							System.out.println("3: "+pseWS.getUrlRedirigirById(r));
							FacesContext.getCurrentInstance().getExternalContext().redirect(pseWS.getUrlRedirigirById(r));
						}
					} catch(Exception e){
						e.printStackTrace();
						showPseAccount = false;
						msgModal = "Ha Ocurrido un Error.";
						showConfirmationModal = false;
						showModal = true;
					}
				}else{
					try {						
					
					System.out.println("boton 1 : "+ this.isShowBotton());
					Long umbral =  WSrecharge.createUmbral(idClientAccount, 
							new BigDecimal(0), 
							new BigDecimal(valueRecharge),
							new Timestamp(System.currentTimeMillis()),
							0L,
							1L);

					ObjectRechage obj = WSrecharge.createListObj(umbral);
					InvokeSqdm rechargeWS= new InvokeSqdm();
					String data =rechargeWS.InvokeRecharge(obj);
					
					System.out.println("despues de invokeRecharge");
				    String dataServiceArray[] = data.split(";");
				   String id=dataServiceArray[0].trim();
				  //  String id="300";
                    String nameFileRq=dataServiceArray[1].trim();
                    String nameFileRp=dataServiceArray[2].trim();
				    System.out.println("DATOS TRAIDOS DESDE EL WEBSERVICE"+dataServiceArray[0]);
					System.out.println("DATOS TRAIDOS DESDE EL WEBSERVICE"+dataServiceArray[1]);
				    System.out.println("DATOS TRAIDOS DESDE EL WEBSERVICE"+dataServiceArray[2]);
				    System.out.println("nameFileRq"+nameFileRq);
				    System.out.println("nameFileRp"+nameFileRp);   
				   
				    if(nameFileRq == null || nameFileRq.equals("null")){
				    	System.out.println("Dentro de validación Rq null");
				    	 nameFileRq = this.xmlGenerate(obj, id, 0L);
				    }
				    if(nameFileRp==null || nameFileRp.equals("null")){	
				    	System.out.println("Dentro de validación Rs null");
				    	nameFileRp = this.xmlGenerate("Transacción no pudo ser procesada por el banco", id, 1L);	
				    }	            	
						
					ReAccountBank rab = null;
					Query qReAccountBank = em.createQuery("Select rab From ReAccountBank rab where rab.accountId.accountId=?1 and rab.state_account_bank = 1 ");
					qReAccountBank.setParameter(1, idClientAccount);
					try{
						rab = (ReAccountBank) qReAccountBank.getSingleResult();
					} catch(NoClassDefFoundError e){
						System.out.println("No se encontro ReAccountBank para la cuenta "+idClientAccount);
					}
					String bankName = WSrecharge.getBankNameByAccount(idClientAccount);
					Long transactionId = WSrecharge.getTransactionByUmbral(umbral);
					if(Long.valueOf(id)== 0L){
						processError=0;//dato para validar si es un proceso de transaccion exitosa
						this.setShowConfirmationModal(false);
						msgModal = "Transacción Exitosa";
						this.setShowModal(true);
						outbox.insertMessageOutbox(userId, 
								EmailProcess.RESOURCE_ALLOCATION_SUCCESSFUL,
								idClientAccount,
								rab.getBankAccountId().getBankAccountId(), 
								transactionId, 
								null,
								null,
								null,
								rab.getBankAccountId().getProduct().getBankId(),
								null,
								SessionUtil.sessionUser().getUserId(),
								null,
								null,
								null,
								true,
								null);
						 msgProcessClient = "Asignación de Recursos por valor de $"+valueRechText+" para la Cuenta FacilPass No. "+idClientAccount+" aprobada por "+bankName+".";				
						 msgProcessAdmin = "Asignación de Recursos por valor de $"+valueRechText+" para la Cuenta FacilPass No. "+idClientAccount+" aprobada por "+bankName+".";				
						valueRecharge = null;
						valueRechText =	"";
						this.setIdClientAccount(-1L);	

						FacesContext context = FacesContext.getCurrentInstance();
						context.getExternalContext().getSessionMap().remove("accountSettingsBean");
					} else {						
					
						processError=1;//datro para validar si es un proceso de transaccion exitosa
						 pseWS.applyRecharge(umbral,Long.valueOf(id), SessionUtil.ip(), SessionUtil.sessionUser().getUserId());
						//sendMail.sendMail(EmailType.CLIENT, user.getSystemUser(SessionUtil.sessionUser().getUserId()).getUserEmail(), EmailSubject.RECHARGE_NOTIFICATION, "Error al Recargar su cuenta FacilPass "+idClientAccount);
						outbox.insertMessageOutbox(user.getSystemUser(SessionUtil.sessionUser().getUserId()).getUserId(),
								EmailProcess.RESOURCE_ALLOCATION_REJECTED,
								idClientAccount,
								rab.getBankAccountId().getBankAccountId(), 
								transactionId, 
								null,
								null,
								null,
								rab.getBankAccountId().getProduct().getBankId(),
								null,
								SessionUtil.sessionUser().getUserId(),
								null,
								null,
								null,
								true,
								null);


						//msgProcess = "Asignación de Recursos por valor de $"+valueRechText+" para la Cuenta FacilPass No. "+idClientAccount+" rechazada por "+bankName+".";

						String RESPONCE_TYPE_COD =id;//dato que viene del servicio web  	
					    Long RESPONSE_ENTITY=1L;//dato que viene del servicio web
					    if(RESPONCE_TYPE_COD=="Time Out"){				    	
					    	RESPONCE_TYPE_COD="5";
					    }
						String codeError=proceso.getResponseDescByCode(Long.valueOf(RESPONCE_TYPE_COD), RESPONSE_ENTITY);
						msgProcessAdmin="La asignación de recursos de la cuenta FacilPass N°. "+idClientAccount+" presentó el siguiente error: "+codeError+" - "+id;
						
//						proceso.createProcessDetail(newProcClient, ProcessTrackDetailType.MANUAL_RECHARGE,
						//		msgProcess.substring(0, msgProcess.length()-1)+" - "+id, SessionUtil.sessionUser().getUserId(), SessionUtil.ip(), 1, "Error al Crear Proceso para Recarga Manual de la cuenta "+idClientAccount,processError);
											
						msgProcessClient="La asignación de recursos de la cuenta FacilPass N°. "+idClientAccount+" presentó el siguiente error: "+codeError+".";							  
						//Se inserta respuesta al generar error cuando se intenta realizar una recarga
						proceso.insertRespuAval(Long.parseLong(RESPONCE_TYPE_COD),RESPONSE_ENTITY,umbral);
						msgModal = codeError;
						showConfirmationModal =  false;
						showModal = true;				
						
					}

					//creacion de proceso de cliente en Mi proceso
					TbProcessTrack idProc = proceso.searchProcess(ProcessTrackType.MY_CLIENT_PROCESS, userId);
					Long newProc = null;
					if(idProc == null){
						newProc = proceso.createProcessTrack(ProcessTrackType.MY_CLIENT_PROCESS, userId, SessionUtil.ip(), SessionUtil.sessionUser().getUserId());
					}else{
						newProc = idProc.getProcessTrackId();
					}
					proceso.createProcessDetail(newProc, ProcessTrackDetailType.MANUAL_RECHARGE,
							msgProcessClient, SessionUtil.sessionUser().getUserId(), SessionUtil.ip(), 1,
							"Error al Crear Proceso para Recarga Manual de la cuenta "+
							idClientAccount,processError,null,null,null,null,0L);

					//creacion de proceso de cliente
					TbProcessTrack idProcClient = proceso.searchProcess(ProcessTrackType.CLIENT, userId);
					Long newProcClient = null;
					if(idProcClient == null){
						newProcClient = proceso.createProcessTrack(ProcessTrackType.CLIENT, userId, SessionUtil.ip(), SessionUtil.sessionUser().getUserId());
					}else{
						newProcClient = idProcClient.getProcessTrackId();
					}
				
					proceso.createProcessDetail(newProcClient, ProcessTrackDetailType.MANUAL_RECHARGE,
							msgProcessAdmin, SessionUtil.sessionUser().getUserId(), SessionUtil.ip(),
							1, "Error al Crear Proceso para Recarga Manual de la cuenta "+
							idClientAccount,processError,nameFileRq,nameFileRp,null,null,0L);
					} catch (Exception e) {
						showPseAccount=false;
						msgModal = "Error en la Transacción.";
						showConfirmationModal =  false;
						showModal = true;
						showModalPSE = false;
					}
				}
					
			}
		}catch(NullPointerException n){
			showPseAccount=false;
			msgModal = "Error en la Transacción.";
			showConfirmationModal =  false;
			showModal = true;
			showModalPSE = false;
		}
	}
	public String xmlGenerate(Object o,String code,Long type){
		System.out.println("xmlGenerate");
	try{
		 SimpleDateFormat sf=new SimpleDateFormat("yyyyMMddHHmmss");
			String name=code+"_R_"+sf.format(new Date())+(type==0L?"_rq.xml":"_rs.xml");
			BufferedWriter writer;
	        XStream xstream= null;
	        String xml= null;
	        xstream = new XStream(new DomDriver());
	        xml = xstream.toXML(o);
	        writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(parametros.getParameterValueById(52L)+
	        		"\\"+name), "UTF-8"));
           System.out.println(parametros.getParameterValueById(52L)+
	        		"\\"+name);
           writer.write(xml); 
           System.out.println("escrito"); 
           writer.close();
           return name;
		}catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error creando XML de request y response");
			return null;
		}	
	}
	public void hideModals(){
		validatePseAccount();
		System.out.println("hideModals");
		setPage(1);
		this.setShowPending(false);
		this.setShowConfirmationModal(false);
		this.setShowModal(false);
		this.setShowConfirmationModalPSE(false);
		this.setShowModalPSE(false);
		this.setMessageMinrecharge(true);
	}

	public void setValueRechText(String valueRechText) {
		this.valueRechText = valueRechText;
	}

	public String getValueRechText() {
		return valueRechText;
	}

	public void setValmin(long valmin) {
		this.valmin = valmin;
	}

	public long getValmin(Long param) {
		valMinText = parametros.getParameterValueById(param);
		if((valMinText.equals(null)) || (valMinText.equals(""))){
			valmin = 0L;
		}else{
			valmin = Long.parseLong(valMinText);
			DecimalFormat nf = new DecimalFormat("###,###,###");
			valMinText = nf.format(valmin);
		}
		System.out.println("valmin "+valmin);
		return valmin;
	}

	public void setValMinText(String valMinText) {
		this.valMinText = valMinText;
	}

	public String getValMinText() {
		if(valMinText.equals(null)){
			valMinText = parametros.getParameterValueById(71L);
		}
		
		if((valMinText.equals(null)) || (valMinText.equals(""))){
			valMinText = "0";
		}else{
			DecimalFormat nf = new DecimalFormat("###,###,###");
			valMinText = nf.format(Long.parseLong(valMinText.replace(".","")));
		}
		return valMinText;
	}

	/**
	 * @param showBotton the showBotton to set
	 */
	public void setShowBotton(boolean showBotton) {
		this.showBotton = showBotton;
	}

	/**
	 * @return the showBotton
	 */
	public boolean isShowBotton() {
		return showBotton;
	}

	public void disabledBotton(){
		this.setShowBotton(true);
	}

	/**
	 * @param showWait the showWait to set
	 */
	public void setShowWait(boolean showWait) {
		this.showWait = showWait;
	}

	/**
	 * @return the showWait
	 */
	public boolean isShowWait() {
		return showWait;
	}

	public boolean isShowPseAccount() {
		return showPseAccount;
	}

	public void setShowPseAccount(boolean showPseAccount) {
		this.showPseAccount = showPseAccount;
	}

	public String getTypePer() {
		return typePer;
	}

	public void setTypePer(String typePer) {
		this.typePer = typePer;
	}

	public String getIdPseEntity() {
		return idPseEntity;
	}

	public void setIdPseEntity(String idPseEntity) {
		this.idPseEntity = idPseEntity;
	}

	public List<SelectItem> getPseEntities() {
		
		
		if(pseEntities == null){
			pseEntities = new ArrayList<SelectItem>();
		}else{
			pseEntities.clear();
		}
		pseEntities.add(new SelectItem("-1L", "--Seleccione Una--"));
		if(bt == 0){
			if(banks==null||banks.size()<=0){

				getFinancialInstitutions();
				bt++;
			}	
		
		}
		for(int i=0;i<banks.size();i++){
			pseEntities.add(new SelectItem(banks.get(i).getFinancialInstitutionCode(),
				banks.get(i).getFinancialInstitutionName()));
		}
		return pseEntities;
	}
	
	public void getFinancialInstitutions(){
		if(banks == null){
			banks=new ArrayList<BankACHData>();			
		}else{
			banks.clear();
		}
		banks=pseWS.getPSEBanks(usrs.getUserId(),idClientAccount);
	}

	public void setPseEntities(List<SelectItem> pseEntities) {
		this.pseEntities = pseEntities;
	}
	/**
	 * Método que lista los de las recargas por cuenta
	 */
	public List<HistoricalRecharges> getRechargeList() {
		if(rechargeList == null) {
			rechargeList = new ArrayList<HistoricalRecharges>();
		} else{
			rechargeList.clear();
		}
		rechargeList = user.getHistoricalRechargesByAccount(idClientAccount);
		return rechargeList;		
	}

	public void setRechargeList(List<HistoricalRecharges> rechargeList) {
		this.rechargeList = rechargeList;
	}

	public boolean isShowRechargeList() {
		return showRechargeList;
	}

	public void setShowRechargeList(boolean showRechargeList) {
		this.showRechargeList = showRechargeList;
	}

	public String getContext() {
		return context;
	}

	public void setContext(String context) {
		this.context = context;
	}

	public String getPseIdStr() {
		return pseIdStr;
	}

	public void setPseIdStr(String pseIdStr) {
		this.pseIdStr = pseIdStr;
	}

	public Long getPseId() {
		return pseId;
	}

	public void setPseId(Long pseId) {
		this.pseId = pseId;
	}

	public String getBankName() {
		return bankName;
	}

	public void setBankName(String bankName) {
		this.bankName = bankName;
	}

	public Long getExpUmbralId() {
		return expUmbralId;
	}

	public void setExpUmbralId(Long expUmbralId) {
		this.expUmbralId = expUmbralId;
	}

	public String getTooltipCuenta() {
		tooltipCuenta=parametros.getParameterValueById(55L);
		return tooltipCuenta;
	}

	public void setTooltipCuenta(String tooltipCuenta) {
		this.tooltipCuenta = tooltipCuenta;
	}

	public String getTooltipEntidad() {
		tooltipEntidad=parametros.getParameterValueById(58L);
		return tooltipEntidad;
	}

	public void setTooltipEntidad(String tooltipEntidad) {
		this.tooltipEntidad = tooltipEntidad;
	}

	public String getTooltipValor() {
		tooltipValor=parametros.getParameterValueById(56L);
		return tooltipValor;
	}

	public void setTooltipValor(String tooltipValor) {
		this.tooltipValor = tooltipValor;
	}

	public String getTooltipPersona() {
		tooltipPersona=parametros.getParameterValueById(57L);
		return tooltipPersona;
	}

	public void setTooltipPersona(String tooltipPersona) {
		this.tooltipPersona = tooltipPersona;
	}

	public boolean isShowModalPSE() {
		return showModalPSE;
	}

	public void setShowModalPSE(boolean showModalPSE) {
		this.showModalPSE = showModalPSE;
	}

	public boolean isShowConfirmationModalPSE() {
		return showConfirmationModalPSE;
	}

	public void setShowConfirmationModalPSE(boolean showConfirmationModalPSE) {
		this.showConfirmationModalPSE = showConfirmationModalPSE;
	}

	public boolean isDisableButtons() {
		return disableButtons;
	}

	public void setDisableButtons(boolean disableButtons) {
		this.disableButtons = disableButtons;
	}
	
	public String saveVoucher(Long userId,Long pseId) {
		String COMPILE_FILE_NAME = "pseVoucher";
		try{
			System.out.println("saveVoucher");
			return this.prepareReport(userId,pseId, COMPILE_FILE_NAME);
		}catch (Exception e) {
			e.printStackTrace();
			System.out.println(" [ Error RechargeClientBean.savePdf ] ");
			return null;
		}
	}
	
	public String downloadVoucher() {
		String p=null;
		String f=null;
		String fileUrl=null;
		this.setShowConfirmationModalPSE(false);
		hideModals();
		try{
			
			System.out.println("Muesta PDF");
			System.out.println("downloadVoucher.pseId: "+pseId);
			System.out.println("downloadVoucher.expUmbralId: "+expUmbralId);
			if(expUmbralId==-1L){
				fileUrl=pseWS.getVoucherById(pseId);
			}else{
				fileUrl=pseWS.getVoucherById(pseWS.getPseIdByUmbral(expUmbralId));
				expUmbralId=-1L;
			}
			System.out.println("fileUrl: "+fileUrl);
			if(fileUrl!=null){
				fileUrl=fileUrl.replace("/", "\\");
				p=fileUrl.substring(0,fileUrl.lastIndexOf("\\"));
				f=fileUrl.substring(fileUrl.lastIndexOf("\\")+1);
				System.out.println("fileUrl: "+fileUrl);
				System.out.println("p: "+p);
				System.out.println("f: "+f);
				java.io.File directory = new java.io.File(fileUrl);
				if(directory.exists()){
					FacesContext facesContext = FacesContext.getCurrentInstance();
					ExternalContext externalContext = facesContext.getExternalContext();
					HttpServletResponse response = (HttpServletResponse) externalContext
							.getResponse();
					File file = new File(p,
							f);
					BufferedInputStream input = null;
					BufferedOutputStream output = null;

					try {
						System.out.println("Entra aqui");
						// Open file.
						input = new BufferedInputStream(new FileInputStream(file),
								DEFAULT_BUFFER_SIZE);
						response.reset();
						response.setHeader("Content-Type", "application/pdf");
						response.setHeader("Content-Length", String.valueOf(file.length()));
						response.setHeader("Content-Disposition", "inline; filename=\""
								+ f + "\"");
						output = new BufferedOutputStream(response.getOutputStream(),
								DEFAULT_BUFFER_SIZE);

						// Write file contents to response.
						byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
						int length;
						while ((length = input.read(buffer)) > 0) {
							output.write(buffer, 0, length);
						}

						// Finalize task.
						output.flush();
					} catch (Exception e) {
						e.printStackTrace();
						System.out.println(" [ Error RechargeClientBean.downloadVoucher ]");
					} finally {
						// Gently close streams.
						System.out.println("Finally");
						close(output);
						close(input);
					}

					// Inform JSF that it doesn't need to handle response.
					// This is very important, otherwise you will get the following
					// exception in the logs:
					// java.lang.IllegalStateException: Cannot forward after response has
					// been committed.
					facesContext.responseComplete();
				}else{
					setMsgModal("No se encontró el archivo solicitado.");
					setShowModalPSE(true);
				}
			}else{
				setMsgModal("No se encontró el archivo solicitado.");
				setShowModalPSE(true);
			}
		}catch (Exception e) {
			e.printStackTrace();
			System.out.println(" [ Error RechargeClientBean.downloadVoucher 1 ] ");
			setMsgModal("Ha ocurrido un error, intente más tarde.");
			setShowModalPSE(true);
		}
		return null;
	}
	
	private static void close(Closeable resource) {
		if (resource != null) {
			try {
				resource.close();
			} catch (IOException e) {
				// Do your thing with the exception. Print it, log it or mail
				// it. It may be useful to
				// know that this will generally only be thrown when the client
				// aborted the download.
				e.printStackTrace();
			}
		}
	}

	public String prepareReport(Long userId,Long pseId, String compile_file_name) {
		TbSystemUser us = null;
		try {
			System.out.println("prepareReport");
			us = em.find(TbSystemUser.class, userId);

			ExternalContext externalContext = FacesContext.getCurrentInstance()
					.getExternalContext();
			ServletContext context = (ServletContext) externalContext
					.getContext();

			ReportConfigUtil.compileReport(context, getCompileDir(),
					compile_file_name);
			File reportFile = new File(ReportConfigUtil.getJasperFilePath(
					context, getCompileDir(), compile_file_name + ".jasper"));

			String path = "";
			String systemParametersValue = parametros.getParameterValueById(28L);

			String uploadedFileName = FileUtil.trimFilePath("PSE_Voucher_"+ System.currentTimeMillis());
			System.out.println("uploadedFileName: "+uploadedFileName);
			path = systemParametersValue.trim()+ "/"+ us.getUserCode()+ "-"
					+ user.getDocumentClient(us.getUserCode(), userId,
							SessionUtil.ip(), userId);

			java.io.File directory = new java.io.File(path.toString());
			System.out.println("directorio: "+directory.toString());
			if (!directory.exists()) {
				System.out.println("Existe");
				// It returns true if directory is a directory.
				boolean result = directory.mkdir();
				if (result) {
					System.out.println("DIR created--->" + result);
				}
			}
			JasperPrint jasperPrint = ReportConfigUtil.fillReport(
					reportFile, getReportParameters(pseId),
					getJRDataSource(), getDataConnection());
			JasperExportManager.exportReportToPdfFile(jasperPrint,
					directory + "/" + uploadedFileName + ".pdf");
			// se crea el archivo PDF
			java.io.File uniqueFile = FileUtil.uniqueFile(new java.io.File(
					path), uploadedFileName);
			System.out.println("doc: "+uniqueFile.toString());
			return uniqueFile.toString()+ ".pdf";
		}catch (Exception e) {
			System.out.println("RechargeClientBean-->Exception");
			e.printStackTrace();
			return null;
		}
	}
	
	public void setCOMPILE_FILE_NAME(String cOMPILE_FILE_NAME) {
		COMPILE_FILE_NAME = cOMPILE_FILE_NAME;
	}

	public String getCOMPILE_FILE_NAME() {
		return COMPILE_FILE_NAME;
	}

	/**
	 * 
	 * @return JRDataSource.
	 */
	protected JRDataSource getJRDataSource() {
		return null;
	}

	/**
	 * 
	 * @return File Name
	 */
	protected String getFileName() {
		return "PSE_Voucher_" + System.currentTimeMillis();
	}

	/**
	 * 
	 * @return COMPILE_DIR
	 */
	protected String getCompileDir() {
		return COMPILE_DIR;
	}
	
	protected ConnectionData getDataConnection() {
		ConnectionData factory = new ConnectionData();
		//factory.getConnection();
		return factory;
	}

	protected Map<String, Object> getReportParameters(Long pseId) {
		Map<String, Object> reportParameters = new HashMap<String, Object>();
		reportParameters.put("idTransaccion", pseId);
		reportParameters.put("RAZONFP", parametros.getParameterValueById(64L));
		reportParameters.put("NITFP", parametros.getParameterValueById(65L));
		System.out.println("parametros comprobante: "+reportParameters.toString());
		return reportParameters;
	}

	public List<HistoricalRecharges> getPendingRechargeList() {
		return pendingRechargeList;
	}

	public void setPendingRechargeList(List<HistoricalRecharges> pendingRechargeList) {
		this.pendingRechargeList = pendingRechargeList;
	}

	public boolean isShowPending() {
		return showPending;
	}

	public void setShowPending(boolean showPending) {
		this.showPending = showPending;
	}
	
	public void validatePseAccount(){
		try {
			if(user.validatePseAccount(idClientAccount)){
				getValmin(POSTPAGO);				
			}else{
				getValmin(PREPAGO);				
			}
			
		} catch (Exception e) {			
			// TODO Auto-generated catch block
			e.printStackTrace();
		}			
	}
	
}